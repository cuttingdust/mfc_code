cmake_minimum_required(VERSION 3.12)

# 使用 vcpkg 工具链文件 Warning  工具连设置必须是在project 前面
set(CMAKE_TOOLCHAIN_FILE $ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake CACHE STRING "Vcpkg toolchain file")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

project(mfc_code)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
if(MSVC)
set(CMAKE_GENERATOR_PLATFORM x64)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_BUILD_TYPE Debug)

# OpenMP
find_package(OpenMP)
message("OpenMP_FOUND = ${OpenMP_FOUND}")

if(OpenMP_FOUND)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

# OpenMP
find_package(MFC)
message("MFC_FOUND = ${MFC_FOUND}")

if(MFC_FOUND)
# 1: static MFC library, 2: shared MFC library
set(CMAKE_MFC_FLAG 2)
endif()

#==================================================================================#

# OpenCV
find_package(OpenCV CONFIG REQUIRED)
message("OpenCV_FOUND = ${OpenCV_FOUND}")
message("OpenCV_VERSION = ${OpenCV_VERSION}")
message("OpenCV_LIBS = ${OpenCV_LIBS}")

# 外部依赖项
set(DPS_INCLUDES)
set(DPS_TARGETS)
set(DPS_LIBRARYS)

# 资源文件

# #图标
set(RC_FILE)

# #qrc 文件
set(QRC_SOURCE_FILES)

# 忽略特定库
if(MSVC)
SET(CMAKE_EXE_LINKER_FLAGS /NODEFAULTLIB:"libcmt.lib;libc.lib")
endif()

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(CommonTools)

####################################################################
add_subdirectory(mfc_helloworld)
add_subdirectory(mfc_dlg)
add_subdirectory(mfc_checkbox)
add_subdirectory(mfc_combox)
add_subdirectory(mfc_listbox)
add_subdirectory(mfc_addr)
#####################################################################
add_subdirectory(mfc_thread_work)  # 工作者线程
add_subdirectory(mfc_thread_work_mulfindile) # 多线程更目录查找文件
add_subdirectory(mfc_thread_ui) #  UI线程
add_subdirectory(mfc_XMFCLogCutter) #  UI线程

# 拷贝assert目录到输出目录
set(ASSERT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/assert)
file(COPY ${ASSERT_PATH} DESTINATION ${OUT_RUN_PATH})
